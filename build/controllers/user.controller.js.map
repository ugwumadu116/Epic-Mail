{"version":3,"sources":["../../api/controllers/user.controller.js"],"names":["dotenv","config","secret","process","env","SECRET","UserController","registerUser","req","res","firstName","lastName","email","password","body","hashPasword","bcrypt","hash","user","createdUser","userService","createUser","Error","safeUser","epicMail","jwtToken","jwt","sign","expiresIn","status","json","data","token","epicmail","error","message","loginUser","checkUser","result","compare"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport dotenv from 'dotenv';\r\nimport userService from '../services/user.services';\r\n\r\ndotenv.config();\r\nconst secret = process.env.SECRET;\r\n\r\nclass UserController {\r\n  static async registerUser(req, res) {\r\n    try {\r\n      const {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n      } = req.body;\r\n      const hashPasword = await bcrypt.hash(password, 10);\r\n      const user = {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        hashPasword,\r\n      };\r\n      const createdUser = await userService.createUser(user);\r\n      if (!createdUser) {\r\n        throw new Error('first name and last name already exits');\r\n      }\r\n      const safeUser = {\r\n        password: createdUser.password,\r\n        epicMail: createdUser.epicMail,\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400,\r\n      });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        data: [{\r\n          token: jwtToken,\r\n          epicmail: safeUser,\r\n        }],\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async loginUser(req, res) {\r\n    try {\r\n      const {\r\n        epicMail,\r\n        password,\r\n      } = req.body;\r\n      const user = await userService.checkUser(epicMail);\r\n      if (!user) {\r\n        throw new Error('User with that email does not exist');\r\n      }\r\n      const result = await bcrypt.compare(password, user.password);\r\n      if (!result) {\r\n        throw new Error(\"Password doesn't match our records\");\r\n      }\r\n      const safeUser = {\r\n        epicMail: user.epicMail,\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400,\r\n      });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        token: jwtToken,\r\n      });\r\n    } catch (error) {\r\n      return res.status(409).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n}\r\nexport default UserController;\r\n"],"file":"user.controller.js"}