{"version":3,"sources":["../../api/controllers/user.controller.js"],"names":["dotenv","config","secret","process","env","SECRET","UserController","req","res","body","firstName","lastName","email","password","bcrypt","hash","hashPasword","user","userService","createUser","createdUser","Error","safeUser","epicMail","jwtToken","jwt","sign","expiresIn","status","json","data","token","epicmail","message","checkUser","compare","result"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEAA,gBAAOC,MAAP;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA3B;;IAEMC,c;;;;;;;;;;;;+CACsBC,G,EAAKC,G;;;;;;;;4BAOvBD,GAAG,CAACE,I,EAJNC,S,aAAAA,S,EACAC,Q,aAAAA,Q,EACAC,K,aAAAA,K,EACAC,Q,aAAAA,Q;;uBAEwBC,gBAAOC,IAAP,CAAYF,QAAZ,EAAsB,EAAtB,C;;;AAApBG,gBAAAA,W;AACAC,gBAAAA,I,GAAO;AACXP,kBAAAA,SAAS,EAATA,SADW;AAEXC,kBAAAA,QAAQ,EAARA,QAFW;AAGXC,kBAAAA,KAAK,EAALA,KAHW;AAIXI,kBAAAA,WAAW,EAAXA;AAJW,iB;;uBAMaE,cAAYC,UAAZ,CAAuBF,IAAvB,C;;;AAApBG,gBAAAA,W;;oBACDA,W;;;;;sBACG,IAAIC,KAAJ,CAAU,wCAAV,C;;;AAEFC,gBAAAA,Q,GAAW;AACfT,kBAAAA,QAAQ,EAAEO,WAAW,CAACP,QADP;AAEfU,kBAAAA,QAAQ,EAAEH,WAAW,CAACG;AAFP,iB;AAIXC,gBAAAA,Q,GAAWC,sBAAIC,IAAJ,CAAS;AAAET,kBAAAA,IAAI,EAAEK;AAAR,iBAAT,EAA6BpB,MAA7B,EAAqC;AACpDyB,kBAAAA,SAAS,EAAE;AADyC,iBAArC,C;iDAGVnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,SADkB;AAE1BE,kBAAAA,IAAI,EAAE,CAAC;AACLC,oBAAAA,KAAK,EAAEP,QADF;AAELQ,oBAAAA,QAAQ,EAAEV;AAFL,mBAAD;AAFoB,iBAArB,C;;;;;iDAQAd,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BK,kBAAAA,OAAO,EAAE,YAAMA;AAFW,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOY1B,G,EAAKC,G;;;;;;;;6BAKpBD,GAAG,CAACE,I,EAFNc,Q,cAAAA,Q,EACAV,Q,cAAAA,Q;;uBAEiBK,cAAYgB,SAAZ,CAAsBX,QAAtB,C;;;AAAbN,gBAAAA,I;;oBACDA,I;;;;;sBACG,IAAII,KAAJ,CAAU,qCAAV,C;;;;uBAEaP,gBAAOqB,OAAP,CAAetB,QAAf,EAAyBI,IAAI,CAACJ,QAA9B,C;;;AAAfuB,gBAAAA,M;;oBACDA,M;;;;;sBACG,IAAIf,KAAJ,CAAU,oCAAV,C;;;AAEFC,gBAAAA,Q,GAAW;AACfC,kBAAAA,QAAQ,EAAEN,IAAI,CAACM;AADA,iB;AAGXC,gBAAAA,Q,GAAWC,sBAAIC,IAAJ,CAAS;AAAET,kBAAAA,IAAI,EAAEK;AAAR,iBAAT,EAA6BpB,MAA7B,EAAqC;AACpDyB,kBAAAA,SAAS,EAAE;AADyC,iBAArC,C;kDAGVnB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,SADkB;AAE1BG,kBAAAA,KAAK,EAAEP;AAFmB,iBAArB,C;;;;;kDAKAhB,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAAA,MAAM,EAAE,OADkB;AAE1BK,kBAAAA,OAAO,EAAE,aAAMA;AAFW,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eAOE3B,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport dotenv from 'dotenv';\r\nimport userService from '../services/user.services';\r\n\r\ndotenv.config();\r\nconst secret = process.env.SECRET;\r\n\r\nclass UserController {\r\n  static async registerUser(req, res) {\r\n    try {\r\n      const {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n      } = req.body;\r\n      const hashPasword = await bcrypt.hash(password, 10);\r\n      const user = {\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        hashPasword,\r\n      };\r\n      const createdUser = await userService.createUser(user);\r\n      if (!createdUser) {\r\n        throw new Error('first name and last name already exits');\r\n      }\r\n      const safeUser = {\r\n        password: createdUser.password,\r\n        epicMail: createdUser.epicMail,\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400,\r\n      });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        data: [{\r\n          token: jwtToken,\r\n          epicmail: safeUser,\r\n        }],\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async loginUser(req, res) {\r\n    try {\r\n      const {\r\n        epicMail,\r\n        password,\r\n      } = req.body;\r\n      const user = await userService.checkUser(epicMail);\r\n      if (!user) {\r\n        throw new Error('User with that email does not exist');\r\n      }\r\n      const result = await bcrypt.compare(password, user.password);\r\n      if (!result) {\r\n        throw new Error(\"Password doesn't match our records\");\r\n      }\r\n      const safeUser = {\r\n        epicMail: user.epicMail,\r\n      };\r\n      const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n        expiresIn: 86400,\r\n      });\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        token: jwtToken,\r\n      });\r\n    } catch (error) {\r\n      return res.status(409).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n}\r\nexport default UserController;\r\n"],"file":"user.controller.js"}