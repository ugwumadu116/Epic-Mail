{"version":3,"sources":["../../api/controllers/message.controller.js"],"names":["MessageController","req","res","messageService","getUserEmails","userData","user","epicMail","userMails","length","Error","status","json","message","getUnreadEmails","getSentEmails","id","params","messageId","parseInt","getSingleEmail","messageDetails","body","postEmail","deleteSingleEmail"],"mappings":"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","sourcesContent":["import messageService from '../services/message.services';\r\n\r\nclass MessageController {\r\n  static async getEmail(req, res) {\r\n    try {\r\n      const userMails = await messageService\r\n        .getUserEmails(req.userData.user.epicMail);\r\n      if (userMails.length === 0) {\r\n        throw new Error('No mail found');\r\n      }\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: userMails,\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getUnreadEmail(req, res) {\r\n    try {\r\n      const userMails = await messageService\r\n        .getUnreadEmails(req.userData.user.epicMail);\r\n      if (userMails.length === 0) {\r\n        throw new Error('No unread mail found');\r\n      }\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: userMails,\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getSentEmail(req, res) {\r\n    try {\r\n      const userMails = await messageService\r\n        .getSentEmails(req.userData.user.epicMail);\r\n      if (userMails.length === 0) {\r\n        throw new Error('No sent mail found');\r\n      }\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: userMails,\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getAnEmail(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const messageId = parseInt(id, 10);\r\n      const userMails = await messageService\r\n        .getSingleEmail(req.userData.user.epicMail, messageId);\r\n      if (!userMails) {\r\n        throw new Error('No mesage found');\r\n      }\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: userMails,\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async PostAnEmail(req, res) {\r\n    try {\r\n      const messageDetails = req.body;\r\n      const userMails = await messageService\r\n        .postEmail(req.userData.user.epicMail, messageDetails);\r\n      if (!userMails) {\r\n        throw new Error('Mail not sent');\r\n      }\r\n      return res.status(201).json({\r\n        status: 201,\r\n        message: userMails,\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async deleteAnEmail(req, res) {\r\n    try {\r\n      const { id } = req.params;\r\n      const messageId = parseInt(id, 10);\r\n      const userMails = await messageService\r\n        .deleteSingleEmail(req.userData.user.epicMail, messageId);\r\n      if (!userMails) {\r\n        throw new Error('No mesage found');\r\n      }\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'Deleted successfully',\r\n      });\r\n    } catch (error) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n}\r\nexport default MessageController;\r\n"],"file":"message.controller.js"}